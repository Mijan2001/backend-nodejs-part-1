const jwt = require('jsonwebtoken');

const authMiddleware = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    console.log(authHeader);
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({
            success: false,
            message:
                'Access denied. No token provided. Please login to continue'
        });
    }

    //decode this token
    try {
        const decodedTokenInfo = jwt.verify(token, process.env.JWT_SECRET_KEY);
        console.log(decodedTokenInfo);

        req.userInfo = decodedTokenInfo;
        next();
    } catch (error) {
        return res.status(500).json({
            success: false,
            message:
                'Access denied. No token provided. Please login to continue'
        });
    }
};

module.exports = authMiddleware;

/*
JWT Authentication Middleware Documentation
ЁЯФР ржЙржжрзНржжрзЗрж╢рзНржп:
ржПржЗ Middleware ржЯрж┐ ржЗржиржХрж╛ржорж┐ржВ рж░рж┐ржХрзБрзЯрзЗрж╕рзНржЯрзЗрж░ Authorization рж╣рзЗржбрж╛рж░ ржерзЗржХрзЗ JWT ржЯрзЛржХрзЗржи ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ, ржПржмржВ ржЯрзЛржХрзЗржи ржмрзИржз рж╣рж▓рзЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржлрзЛ req.userInfo ржП рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ next() ржжрж┐рзЯрзЗ ржкрж░ржмрж░рзНрждрзА middleware ржмрж╛ route handler ржП ржпрж╛ржУрзЯрж╛рж░ ржЕржирзБржорждрж┐ ржжрзЗрзЯред

ЁЯУж 1. JWT рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржоржкрзЛрж░рзНржЯ
js
Copy
Edit
const jwt = require('jsonwebtoken');
ржмрзНржпрж╛ржЦрзНржпрж╛:
jsonwebtoken рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛ JWT encode/decode ржмрж╛ verify ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯред

ЁЯФБ 2. Middleware ржлрж╛ржВрж╢ржи рж╕ржВржЬрзНржЮрж╛
js
Copy
Edit
const authMiddleware = (req, res, next) => {
ржмрзНржпрж╛ржЦрзНржпрж╛:
Express ржПрж░ ржПржХржЯрж┐ ржХрж╛рж╕рзНржЯржо middleware, ржпрзЗржЯрж╛ req, res, ржУ next ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржЧрзНрж░рж╣ржг ржХрж░рзЗред

ЁЯУе 3. Token рж░рж┐ржб ржХрж░рж╛
js
Copy
Edit
const authHeader = req.headers['authorization'];
console.log(authHeader);
const token = authHeader && authHeader.split(' ')[1];
ржмрзНржпрж╛ржЦрзНржпрж╛:

ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржерзЗржХрзЗ ржЖрж╕рж╛ Authorization рж╣рзЗржбрж╛рж░ржЯрж┐ рж░рж┐ржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

рж╕рж╛ржзрж╛рж░ржгржд ржЯрзЛржХрзЗржи "Bearer TOKEN_STRING" ржлрж░рзНржорзЗржЯрзЗ ржЖрж╕рзЗ, рждрж╛ржЗ split(' ')[1] ржжрж┐рзЯрзЗ рж╢рзБржзрзБ TOKEN_STRING ржирзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред

ЁЯЪл 4. Token ржирж╛ ржерж╛ржХрж▓рзЗ рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рж╛
js
Copy
Edit
if (!token) {
    return res.status(401).json({
        success: false,
        message: 'Access denied. No token provided. Please login to continue'
    });
}
ржмрзНржпрж╛ржЦрзНржпрж╛:

ржпржжрж┐ ржЯрзЛржХрзЗржи ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ 401 Unauthorized рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржирзЛ рж╣рзЯред

ЁЯФН 5. Token ржпрж╛ржЪрж╛ржЗ ржУ ржбрж┐ржХрзЛржб ржХрж░рж╛
js
Copy
Edit
try {
    const decodedTokenInfo = jwt.verify(token, process.env.JWT_SECRET_KEY);
    console.log(decodedTokenInfo);

    req.userInfo = decodedTokenInfo;
    next();
ржмрзНржпрж╛ржЦрзНржпрж╛:

jwt.verify() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЯрзЛржХрзЗржи ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

рж╕ржлрж▓ рж╣рж▓рзЗ decodedTokenInfo ржП ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржлрзЛ (ржпрзЗржоржи id, email ржЗрждрзНржпрж╛ржжрж┐) ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗред

req.userInfo рждрзЗ рж╕рзЗржЗ ржЗржиржлрзЛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣рзЯ, ржпрж╛ ржкрж░ржмрж░рзНрждрзА рж░рж╛ржЙржЯ ржмрж╛ middleware ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред

next() ржХрж▓ ржХрж░рзЗ ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржкрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯред

тЭМ 6. ржпржжрж┐ ржЯрзЛржХрзЗржи ржнрзНржпрж╛рж▓рж┐ржб ржирж╛ рж╣рзЯ (catch block)
js
Copy
Edit
} catch (error) {
    return res.status(500).json({
        success: false,
        message: 'Access denied. No token provided. Please login to continue'
    });
}
ржмрзНржпрж╛ржЦрзНржпрж╛:

ржпржжрж┐ jwt.verify() ржП ржХрзЛржирзЛ error ржЖрж╕рзЗ (ржпрзЗржоржи invalid token, expired token), рждрж╛рж╣рж▓рзЗ 500 error рж╕рж╣ access deny ржХрж░рж╛ рж╣рзЯред

ЁЯУд 7. Middleware ржПржХрзНрж╕ржкрзЛрж░рзНржЯ
js
Copy
Edit
module.exports = authMiddleware;
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржЕржирзНржп ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржПржЗ middleware ржлрж╛ржВрж╢ржи ржЗржоржкрзЛрж░рзНржЯ ржХрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

тЬЕ рж╕рж╛рж░рж╛ржВрж╢ (Summary):
ржХрж╛ржЬ	ржмрзНржпрж╛ржЦрзНржпрж╛
JWT Token verify	Authorization рж╣рзЗржбрж╛рж░ ржерзЗржХрзЗ ржЯрзЛржХрзЗржи ржмрзЗрж░ ржХрж░рзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ
Token ржирж╛ ржерж╛ржХрж▓рзЗ	401 Access Denied рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ
Token ржарж┐ржХ ржерж╛ржХрж▓рзЗ	ржбрж┐ржХрзЛржб ржХрж░рж╛ ржЗржЙржЬрж╛рж░ ржЗржиржлрзЛ req.userInfo рждрзЗ рж░рзЗржЦрзЗ next() ржХрж░рзЗ
Middleware Export	ржЕржирзНржпрж╛ржирзНржп ржлрж╛ржЗрж▓рзЗ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп
*/
