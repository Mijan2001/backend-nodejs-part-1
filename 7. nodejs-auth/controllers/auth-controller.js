const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

//register controller
const registerUser = async (req, res) => {
    try {
        //extract user information from our request body
        const { username, email, password, role } = req.body;

        //check if the user is already exists in our database
        const checkExistingUser = await User.findOne({
            $or: [{ username }, { email }]
        });
        if (checkExistingUser) {
            return res.status(400).json({
                success: false,
                message:
                    'User is already exists either with same username or same email. Please try with a different username or email'
            });
        }

        //hash user password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        //create a new user and save in your database
        const newlyCreatedUser = new User({
            username,
            email,
            password: hashedPassword,
            role: role || 'user'
        });

        await newlyCreatedUser.save();

        if (newlyCreatedUser) {
            res.status(201).json({
                success: true,
                message: 'User registered successfully!'
            });
        } else {
            res.status(400).json({
                success: false,
                message: 'Unable to register user! please try again.'
            });
        }
    } catch (e) {
        console.log(e);
        res.status(500).json({
            success: false,
            message: 'Some error occured! Please try again'
        });
    }
};

//login controller

const loginUser = async (req, res) => {
    try {
        const { username, password } = req.body;

        //find if the current user is exists in database or not
        const user = await User.findOne({ username });

        if (!user) {
            return res.status(400).json({
                success: false,
                message: `User doesn't exists`
            });
        }
        //if the password is correct or not
        const isPasswordMatch = await bcrypt.compare(password, user.password);

        if (!isPasswordMatch) {
            return res.status(400).json({
                success: false,
                message: 'Invalid credentials!'
            });
        }

        //create user token
        const accessToken = jwt.sign(
            {
                userId: user._id,
                username: user.username,
                role: user.role
            },
            process.env.JWT_SECRET_KEY,
            {
                expiresIn: '30m'
            }
        );

        res.status(200).json({
            success: true,
            message: 'Logged in successful',
            accessToken
        });
    } catch (e) {
        console.log(e);
        res.status(500).json({
            success: false,
            message: 'Some error occured! Please try again'
        });
    }
};

const changePassword = async (req, res) => {
    try {
        const userId = req.userInfo.userId;

        //extract old and new password;
        const { oldPassword, newPassword } = req.body;

        //find the current logged in user
        const user = await User.findById(userId);

        if (!user) {
            return res.status(400).json({
                success: false,
                message: 'User not found'
            });
        }

        //check if the old password is correct
        const isPasswordMatch = await bcrypt.compare(
            oldPassword,
            user.password
        );

        if (!isPasswordMatch) {
            return res.status(400).json({
                success: false,
                message: 'Old password is not correct! Please try again.'
            });
        }

        //hash the new password here
        const salt = await bcrypt.genSalt(10);
        const newHashedPassword = await bcrypt.hash(newPassword, salt);

        //update user password
        user.password = newHashedPassword;
        await user.save();

        res.status(200).json({
            success: true,
            message: 'Password changed successfully'
        });
    } catch (e) {
        console.log(e);
        res.status(500).json({
            success: false,
            message: 'Some error occured! Please try again'
        });
    }
};

module.exports = { registerUser, loginUser, changePassword };

/*
registerUser тАФ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░
ржХрж╛ржЬ:
ржирждрзБржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржбрж╛ржЯрж╛ржмрзЗржЗрж╕рзЗ ржпрзБржХрзНржд ржХрж░рж╛ред

ржзрж╛ржкрж╕ржорзВрж╣:
ржбрзЗржЯрж╛ рж░рж┐ржб: req.body ржерзЗржХрзЗ username, email, password, role ржирзЗржУрзЯрж╛ рж╣рзЯред

ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ:
ржПржХржЗ username ржЕржержмрж╛ email ржерж╛ржХрж▓рзЗ, 400 рж░рзЗрж╕ржкржирзНрж╕ ржжрж┐рзЯрзЗ ржЬрж╛ржирж╛рзЯ:

"User is already exists..."

ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж╣рзНржпрж╛рж╢:

bcrypt.genSalt(10) ржжрж┐рзЯрзЗ рж╕рж▓рзНржЯ рждрзИрж░рж┐ ржХрж░рзЗ

bcrypt.hash(password, salt) ржжрж┐рзЯрзЗ рж╣рзНржпрж╛рж╢ ржХрж░рзЗ

ржирждрзБржи ржЗржЙржЬрж╛рж░ рждрзИрж░рж┐:
ржЗржЙржЬрж╛рж░ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рзЗ, рж╣рзНржпрж╛рж╢ржХрзГржд ржкрж╛рж╕ржУрзЯрж╛рж░рзНржбрж╕рж╣ред

ржбрж╛ржЯрж╛ржмрзЗржЗрж╕рзЗ рж╕ржВрж░ржХрзНрж╖ржг:
save() ржжрж┐рзЯрзЗ ржоржЩрзНржЧрзЛржбрж┐ржмрж┐рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗред

рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛рзЯ:

рж╕ржлрж▓ рж╣рж▓рзЗ: 201 (Created)

ржирж╛ рж╣рж▓рзЗ: 400 ржмрж╛ 500

ЁЯФР loginUser тАФ рж▓ржЧржЗржи ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░
ржХрж╛ржЬ:
ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж▓ржЧржЗржи рж╣рж▓рзЗ ржЯрзЛржХрзЗржи рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

ржзрж╛ржкрж╕ржорзВрж╣:
ржЗржиржкрзБржЯ ржбрзЗржЯрж╛ ржирзЗрзЯрж╛: username, password

ржЗржЙржЬрж╛рж░ ржЦрзЛржБржЬрж╛: User.findOne({ username })

ржирж╛ ржкрзЗрж▓рзЗ 400 ржжрж┐рзЯрзЗ ржЬрж╛ржирж╛рзЯ:

"User doesn't exist"

ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржорж┐рж▓рж╛ржирзЛ:
bcrypt.compare(password, user.password)

ржирж╛ ржорж┐рж▓рж▓рзЗ:

"Invalid credentials!"

JWT ржЯрзЛржХрзЗржи рждрзИрж░рж┐:

ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐, ржирж╛ржо, ржнрзВржорж┐ржХрж╛ ржжрж┐рзЯрзЗ ржЯрзЛржХрзЗржи

expiresIn: '30m'

рж╕ржлрж▓ рж░рзЗрж╕ржкржирзНрж╕:

"Logged in successful" ржПржмржВ accessToken рж░рж┐ржЯрж╛рж░рзНржи

ЁЯФТ changePassword тАФ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи
ржХрж╛ржЬ:
рж▓ржЧржЗржи ржХрж░рж╛ ржЗржЙржЬрж╛рж░ рждрж╛рж░ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред

ржзрж╛ржкрж╕ржорзВрж╣:
ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржирзЗрзЯрж╛:
req.userInfo.userId (ржорж╛ржирзЗ ржЗржЙржЬрж╛рж░ ржЖржЧрзЗ ржерзЗржХрзЗ ржЕржерзЗржирзНржЯрж┐ржХрзЗржЯрзЗржб)

ржкрзБрж░рж╛ржирзЛ ржУ ржирждрзБржи ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж░рж┐ржб:
req.body.oldPassword, req.body.newPassword

ржЗржЙржЬрж╛рж░ ржЦрзЛржБржЬрж╛:
User.findById(userId)

ржкрзБрж░рж╛ржирзЛ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржорж┐рж▓рж╛ржирзЛ:
ржирж╛ ржорж┐рж▓рж▓рзЗ, 400 ржжрж┐рзЯрзЗ ржЬрж╛ржирж╛рзЯ:

"Old password is not correct!"

ржирждрзБржи ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб рж╣рзНржпрж╛рж╢ ржХрж░рзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛:

ржирждрзБржи рж╣рзНржпрж╛рж╢ ржХрж░рзЗ: bcrypt.hash(newPassword, salt)

user.password = newHashedPassword

user.save()

рж╕ржлрж▓ рж░рзЗрж╕ржкржирзНрж╕:

"Password changed successfully"
*/
