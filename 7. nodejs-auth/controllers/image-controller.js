const Image = require('../models/Image');
const { uploadToCloudinary } = require('../helpers/cloudinaryHelper');
const fs = require('fs');
const cloudinary = require('../config/cloudinary');

const uploadImageController = async (req, res) => {
    try {
        //check if file is missing in req object
        if (!req.file) {
            return res.status(400).json({
                success: false,
                message: 'File is required. Please upload an image'
            });
        }

        //upload to cloudinary
        const { url, publicId } = await uploadToCloudinary(req.file.path);

        //store the image url and public id along with the uploaded user id in database
        const newlyUploadedImage = new Image({
            url,
            publicId,
            uploadedBy: req.userInfo.userId
        });

        await newlyUploadedImage.save();

        //delete the file from local stroage
        // fs.unlinkSync(req.file.path);

        res.status(201).json({
            success: true,
            message: 'Imaged uploaded successfully',
            image: newlyUploadedImage
        });
    } catch (error) {
        console.log(error);
        res.status(500).json({
            success: false,
            message: 'Something went wrong! Please try again'
        });
    }
};

const fetchImagesController = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 2;
        const skip = (page - 1) * limit;

        const sortBy = req.query.sortBy || 'createdAt';
        const sortOrder = req.query.sortOrder === 'asc' ? 1 : -1;
        const totalImages = await Image.countDocuments();
        const totalPages = Math.ceil(totalImages / limit);

        const sortObj = {};
        sortObj[sortBy] = sortOrder;
        const images = await Image.find().sort(sortObj).skip(skip).limit(limit);

        if (images) {
            res.status(200).json({
                success: true,
                currentPage: page,
                totalPages: totalPages,
                totalImages: totalImages,
                data: images
            });
        }
    } catch (error) {
        console.log(error);
        res.status(500).json({
            success: false,
            message: 'Something went wrong! Please try again'
        });
    }
};

const deleteImageController = async (req, res) => {
    try {
        const getCurrentIdOfImageToBeDeleted = req.params.id;
        const userId = req.userInfo.userId;

        const image = await Image.findById(getCurrentIdOfImageToBeDeleted);

        if (!image) {
            return res.status(404).json({
                success: false,
                message: 'Image not found'
            });
        }

        //check if this image is uploaded by the current user who is trying to delete this image
        if (image.uploadedBy.toString() !== userId) {
            return res.status(403).json({
                success: false,
                message: `You are not authorized to delete this image because you haven't uploaded it`
            });
        }

        //delete this image first from your cloudinary stroage
        await cloudinary.uploader.destroy(image.publicId);

        //delete this image from mongodb database
        await Image.findByIdAndUpdate(getCurrentIdOfImageToBeDeleted);

        res.status(200).json({
            success: true,
            message: 'Image deleted successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).json({
            success: false,
            message: 'Something went wrong! Please try again'
        });
    }
};

module.exports = {
    uploadImageController,
    fetchImagesController,
    deleteImageController
};

/*
Image Upload, Fetch ржПржмржВ Delete Controller тАУ ржбржХрзБржорзЗржирзНржЯрзЗрж╢ржи
ЁЯФБ 1. uploadImageController
ржПржЗ ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░ржЯрж┐ ржЗржЙржЬрж╛рж░ ржХрж░рзНрждрзГржХ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж▓рзЛржХрж╛рж▓ ржЗржорзЗржЬ ржлрж╛ржЗрж▓ржХрзЗ Cloudinary рждрзЗ ржЖржкрж▓рзЛржб ржХрж░рзЗ ржПржмржВ рждрж╛рж░ URL ржУ Public ID MongoDB рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗред

тЬЕ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
js
Copy
Edit
if (!req.file) {
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржпржжрж┐ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рждрж╛ ржЪрзЗржХ ржХрж░рзЗ error рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣рзЯред

js
Copy
Edit
const { url, publicId } = await uploadToCloudinary(req.file.path);
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржлрж╛ржЗрж▓ржЯрж┐ Cloudinary рждрзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣рзЯ ржПржмржВ рждрж╛рж░ ржерзЗржХрзЗ secure URL ржУ publicId ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред

js
Copy
Edit
const newlyUploadedImage = new Image({
    url,
    publicId,
    uploadedBy: req.userInfo.userId
});
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржЗржорзЗржЬрзЗрж░ рждржерзНржп (url, publicId ржУ ржЗржЙржЬрж╛рж░рзЗрж░ ID) ржирж┐рзЯрзЗ ржирждрзБржи ржПржХржЯрж┐ ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯред

js
Copy
Edit
await newlyUploadedImage.save();
ржмрзНржпрж╛ржЦрзНржпрж╛:
MongoDB рждрзЗ ржбрзЗржЯрж╛ рж╕рзЗржн ржХрж░рж╛ рж╣рзЯред

js
Copy
Edit
// fs.unlinkSync(req.file.path);
ржмрзНржпрж╛ржЦрзНржпрж╛:
Cloudinary рждрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛рж░ ржкрж░ рж▓рзЛржХрж╛рж▓ ржлрж╛ржЗрж▓ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп ржПржЗ рж▓рж╛ржЗржиржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ (ржХржорзЗржирзНржЯ ржЖржХрж╛рж░рзЗ рж░рж╛ржЦрж╛ рж╣рзЯрзЗржЫрзЗ)ред

ЁЯУе Response:
json
Copy
Edit
{
  "success": true,
  "message": "Image uploaded successfully",
  "image": { ... }
}
ЁЯФН 2. fetchImagesController
ржЗржорзЗржЬржЧрзБрж▓рзЛ Pagination ржПржмржВ Sorting рж╕рж╣ржХрж╛рж░рзЗ ржлрзЗржЪ ржХрж░рзЗ ржЗржЙржЬрж╛рж░ржХрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

тЬЕ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
js
Copy
Edit
const page = parseInt(req.query.page) || 1;
const limit = parseInt(req.query.limit) || 2;
const skip = (page - 1) * limit;
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржкрзЗржЗржЬ ржиржорзНржмрж░ ржПржмржВ ржкрзНрж░рждрж┐ржкрзЗржЗржЬ ржХрждржЯрж┐ ржЫржмрж┐ ржжрзЗржЦрж╛рждрзЗ рж╣ржмрзЗ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

js
Copy
Edit
const sortBy = req.query.sortBy || 'createdAt';
const sortOrder = req.query.sortOrder === 'asc' ? 1 : -1;
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржЗржЙржЬрж╛рж░ ржЪрж╛ржЗрж▓рзЗ sortBy ржПржмржВ sortOrder ржжрж┐рзЯрзЗ ржЗржорзЗржЬржЧрзБрж▓рзЛ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛ржЬрж╛ржирзЛ рж╣ржмрзЗ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗред

js
Copy
Edit
const totalImages = await Image.countDocuments();
const totalPages = Math.ceil(totalImages / limit);
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржорзЛржЯ ржХрждржЧрзБрж▓рзЛ ржЫржмрж┐ ржЖржЫрзЗ ржПржмржВ рж╕рзЗржЗ ржЕржирзБржпрж╛рзЯрзА ржорзЛржЯ ржХрзЯржЯрж┐ ржкрзЗржЗржЬ рж╣ржмрзЗ рждрж╛ ржЧржгржирж╛ ржХрж░рж╛ рж╣рзЯред

js
Copy
Edit
const images = await Image.find().sort(sortObj).skip(skip).limit(limit);
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржбрзЗржЯрж╛ржмрзЗржЬ ржерзЗржХрзЗ рж╕ржарж┐ржХ page ржЕржирзБржпрж╛рзЯрзА ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрж░рж┐ржорж╛ржг ржЫржмрж┐ ржлрзЗржЪ ржХрж░рж╛ рж╣рзЯред

ЁЯУе Response:
json
Copy
Edit
{
  "success": true,
  "currentPage": 1,
  "totalPages": 5,
  "totalImages": 10,
  "data": [...]
}
ЁЯЧСя╕П 3. deleteImageController
ржПржЗ ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░ ржЗржЙржЬрж╛рж░ ржХрж░рзНрждрзГржХ ржЖржкрж▓рзЛржбржХрзГржд ржЗржорзЗржЬржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рзЗ Cloudinary ржПржмржВ MongoDB ржЙржнрзЯ ржЬрж╛рзЯржЧрж╛ ржерзЗржХрзЗред

тЬЕ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
js
Copy
Edit
const getCurrentIdOfImageToBeDeleted = req.params.id;
const userId = req.userInfo.userId;
ржмрзНржпрж╛ржЦрзНржпрж╛:
URL ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЗржорзЗржЬрзЗрж░ ID ржкрж╛ржУрзЯрж╛ рж╣рзЯ ржПржмржВ рж▓ржЧржЗржиржХрзГржд ржЗржЙржЬрж╛рж░рзЗрж░ ID ржЪрзЗржХ ржХрж░рж╛ рж╣рзЯред

js
Copy
Edit
const image = await Image.findById(getCurrentIdOfImageToBeDeleted);
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржбрзЗржЯрж╛ржмрзЗржЬ ржерзЗржХрзЗ рж╕рзЗржЗ ID ржЕржирзБржпрж╛рзЯрзА ржЗржорзЗржЬ ржкрж╛ржУрзЯрж╛ рж╣рзЯред

js
Copy
Edit
if (image.uploadedBy.toString() !== userId) {
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржЗржЙржЬрж╛рж░ ржпрзЗ ржЗржорзЗржЬржЯрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржЗржЫрзЗ рж╕рзЗржЯрж┐ рждрж╛рж░ ржирж┐ржЬрзЗрж░ ржЖржкрж▓рзЛржбржХрзГржд ржХрж┐ржирж╛ рждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣рзЯред

js
Copy
Edit
await cloudinary.uploader.destroy(image.publicId);
ржмрзНржпрж╛ржЦрзНржпрж╛:
Cloudinary ржерзЗржХрзЗ рж╕рзЗржЗ ржЗржорзЗржЬржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯред

js
Copy
Edit
await Image.findByIdAndUpdate(getCurrentIdOfImageToBeDeleted);
ржнрзБрж▓:
ржПржЦрж╛ржирзЗ .findByIdAndDelete() рж╣ржУрзЯрж╛ ржЙржЪрж┐ржд, ржирзЯрждрзЛ ржбрзЗржЯрж╛ржмрзЗржЬ ржерзЗржХрзЗ ржЫржмрж┐ ржбрж┐рж▓рж┐ржЯ рж╣ржмрзЗ ржирж╛ред

ЁЯУМ рж╕ржарж┐ржХ ржХрзЛржб:

js
Copy
Edit
await Image.findByIdAndDelete(getCurrentIdOfImageToBeDeleted);
ЁЯУе Response:
json
Copy
Edit
{
  "success": true,
  "message": "Image deleted successfully"
}
ЁЯУШ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржЯрзЗржмрж┐рж▓
ржлрж╛ржВрж╢ржи	ржХрж╛ржЬ	HTTP Method
uploadImageController	ржлрж╛ржЗрж▓ Cloudinary рждрзЗ ржЖржкрж▓рзЛржб ржХрж░рзЗ ржПржмржВ MongoDB рждрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ	POST
fetchImagesController	Pagination рж╕рж╣ ржЗржорзЗржЬ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ	GET
deleteImageController	Image ржПрж░ ржорж╛рж▓рж┐ржХрж╛ржирж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ, Cloudinary ржПржмржВ MongoDB ржерзЗржХрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ	DELETE
*/
