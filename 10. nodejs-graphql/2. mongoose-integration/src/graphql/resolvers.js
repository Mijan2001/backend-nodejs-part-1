const Product = require('../models/Product');

const resolvers = {
    Query: {
        products: async () => await Product.find({}),
        product: async (_, { id }) => await Product.findById(id)
    },

    Mutation: {
        createProduct: async (_, args) => {
            const newlyCreatedProduct = new Product(args);

            return await newlyCreatedProduct.save();
        },

        updateProduct: async (_, { id, ...updatedFields }) => {
            return await Product.findByIdAndUpdate(id, updatedFields, {
                new: true
            });
        },

        deleteProduct: async (_, { id }) => {
            const deletedProduct = await Product.findByIdAndDelete(id);

            return !!deletedProduct;
        }
    }
};

module.exports = resolvers;

/*
 GraphQL Resolvers: Product CRUD API
ЁЯУж ржЗржоржкрзЛрж░рзНржЯ рж╕рзЗржХрж╢ржи
js
Copy
Edit
const Product = require('../models/Product');
ржмрзНржпрж╛ржЦрзНржпрж╛:
MongoDB-ржПрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзБржХрзНржд ржПржХржЯрж┐ Product ржоржбрзЗрж▓ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, ржпрж╛ Mongoose рж╕рзНржХрж┐ржорж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрзЗржЯрж╛ржмрзЗржЬрзЗ ржбрж╛ржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг/ржкрж╛ржУрзЯрж╛/ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛рж░ ржХрж╛ржЬ ржХрж░рзЗред

ЁЯза Resolvers ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐
js
Copy
Edit
const resolvers = {
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржПржЯрж╛ ржорзВрж▓ GraphQL рж░рж┐ржЬрж▓ржнрж╛рж░ ржЕржмржЬрзЗржХрзНржЯ, ржпрзЗржЦрж╛ржирзЗ Query ржПржмржВ Mutation ржлрж╛ржВрж╢ржиржЧрзБрж▓рзЛ рж╕ржВржЬрзНржЮрж╛рзЯрж┐ржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

ЁЯФН Query Section
1. products Query
js
Copy
Edit
products: async () => await Product.find({})
ржмрзНржпрж╛ржЦрзНржпрж╛:
рж╕ржорж╕рзНржд ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржбрзЗржЯрж╛ ржбрзЗржЯрж╛ржмрзЗржЬ ржерзЗржХрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

Product.find({}): ржХрзЛржи рж╢рж░рзНржд ржЫрж╛рзЬрж╛ржЗ рж╕ржм ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

2. product Query (by ID)
js
Copy
Edit
product: async (_, { id }) => await Product.findById(id)
ржмрзНржпрж╛ржЦрзНржпрж╛:
ржирж┐рж░рзНржжрж┐рж╖рзНржЯ id ржЕржирзБржпрж╛рзЯрзА ржПржХржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЦрзБржБржЬрзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

_ рж╣ржЪрзНржЫрзЗ parent, ржпрзЗржЯрж╛ ржПржЦрж╛ржирзЗ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯржирж┐ред

тЬНя╕П Mutation Section
1. createProduct Mutation
js
Copy
Edit
createProduct: async (_, args) => {
    const newlyCreatedProduct = new Product(args);
    return await newlyCreatedProduct.save();
}
ржмрзНржпрж╛ржЦрзНржпрж╛:

args ржПрж░ ржорж╛ржзрзНржпржорзЗ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржерзЗржХрзЗ ржЖрж╕рж╛ ржЗржиржкрзБржЯ ржжрж┐рзЯрзЗ ржирждрзБржи ржПржХржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯред

new Product(args): ржЗржиржкрзБржЯ ржбрзЗржЯрж╛ ржжрж┐рзЯрзЗ Mongoose ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐ред

.save(): ржбрзЗржЯрж╛ржмрзЗржЬрзЗ рж╕рзЗржЗ ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗред

2. updateProduct Mutation
js
Copy
Edit
updateProduct: async (_, { id, ...updatedFields }) => {
    return await Product.findByIdAndUpdate(id, updatedFields, {
        new: true
    });
}
ржмрзНржпрж╛ржЦрзНржпрж╛:

ржирж┐рж░рзНржжрж┐рж╖рзНржЯ id ржЕржирзБрж╕рж╛рж░рзЗ ржПржХржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЖржкржбрзЗржЯ ржХрж░рзЗред

{ new: true } ржорж╛ржирзЗ ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛рж░ ржкрж░рзЗрж░ ржирждрзБржи ржбрзЗржЯрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

3. deleteProduct Mutation
js
Copy
Edit
deleteProduct: async (_, { id }) => {
    const deletedProduct = await Product.findByIdAndDelete(id);
    return !!deletedProduct;
}
ржмрзНржпрж╛ржЦрзНржпрж╛:

ржкрзНрж░рзЛржбрж╛ржХрзНржЯ id ржжрж┐рзЯрзЗ ржЦрзБржБржЬрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯред

!!deletedProduct: ржпржжрж┐ ржбрж┐рж▓рж┐ржЯ рж╕ржлрж▓ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ, ржирж╛рж╣рж▓рзЗ falseред

ЁЯУд ржоржбрж┐ржЙрж▓ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ
js
Copy
Edit
module.exports = resolvers;
ржмрзНржпрж╛ржЦрзНржпрж╛:

resolvers ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрж╛рждрзЗ ржПржЯрж╛ ржЕржирзНржп ржлрж╛ржЗрж▓рзЗ ржпрзЗржоржи ApolloServer ржмрж╛ schema.js ржлрж╛ржЗрж▓рзЗ ржмрзНржпржмрж╣рзГржд рж╣рждрзЗ ржкрж╛рж░рзЗред

тЬЕ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж╕рж╛рж░рж╛ржВрж╢:
ржЖржкржирж╛рж░ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг GraphQL API ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ Product ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ:

тЬЕ рж╕ржм ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржжрзЗржЦрж╛ржирзЛ (products)

тЬЕ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржжрзЗржЦрж╛ржирзЛ (product)

тЬЕ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрзИрж░рж┐ (createProduct)

тЬЕ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЖржкржбрзЗржЯ (updateProduct)

тЬЕ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржбрж┐рж▓рж┐ржЯ (deleteProduct)
*/
